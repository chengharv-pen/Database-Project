✅ >>> Done
O >>> Partially done
❌ >>> Not done

-------------------------- Project State (MAIN FUNCTIONALITIES) --------------------------

0 - Setup
login ✅ 
logout ✅ 
change user/pass ✅
create account ✅ 

1 - Members
Edit ✅
Display ✅
Block ✅
delete account ✅ 

2 - Groups
Join a Group ✅
Withdraw from Group ✅
View Group Members ✅
Create ✅
Edit ✅
Approve Join Requests ✅
Display Groups ✅
Delete ✅

3 - Friends (this is really relationships but we will go with this terminology)
Create (send/approve friend request) ✅
Edit (edit to Family/Friends/Colleagues/Other) ✅
Delete (remove friend) ✅
Display (display ALL friends) ✅

4 - Publishing Posts 
Publish a Post ✅
Should we make Members be able to post Posts for a singular Joined Group? ✅

5 - Viewing Posts
All posts ✅
Best posts ✅
Latest posts ✅
Oldest posts ✅
Filtered by Groups ✅
Filtered by Friends (Private) ✅
Filtered by Your Posts ✅
Filtered by Other's Posts ✅
Edit Own Comments ✅
Delete Comments in your Posts ✅
Delete Your Comments in other Posts ✅
Liking/Disliking Posts ✅

6 - Chat
Implement something similar to Discord's chat here? Only text, no pictures/videos for simplicity. ✅

7 - Events
Organize by voting between multiple date/time/place suggested by group members O

8 - Gift Exchange of ideas
how???????????? ✅

-------------------------- Project Intricacies -------------------------- 

0 - Warning System
Incrementing warnings ✅
Suspending an account ✅
Fines (ONLY FOR BUSINESS ACCOUNTS) ✅
Only Administrators should issue Warnings ✅
Warnings for Comments, Posts, Chat Messages and Emails ❌

1 - Email System
how should i simulate this...? ✅
"CONS will allow only Proton email addresses!" ✅

2 - Members Settings
A Member should have Status Inactive if he is not logged in. ✅

We should prompt for new Username/Password if NeedsUsernameChange/NeedsPasswordChange are TRUE ✅

Junior >>> can post (has control over the scope of it), can control the comments. ✅
		   can request to be a Senior ✅
Senior >>> can create groups and add people to groups ✅
Administrator >>> can change privilege/status of other members ✅

-------------------------- Project Intricacies (I ran out of time) -------------------------- 

3 - Notification System (this is definitely not being implemented due to time constraints)
A chat message should send a notification ❌ 
A new Group Post that is not from yourself should send a notification ❌
A new Email should send a notification ❌
An Event that you participated in that finishes should send a notification ❌
The assignment of Secret Santas for a Gift Exchange should send a notification ❌
A Warning should send a notification ❌
A Fine should send a notification ❌

4 - Plebiscite System (this is definitely not being implemented due to time constraints)
I have no clue how to implement this ❌

To help with implementing these, I propose these tables...

-- Create Plebiscite relation
CREATE TABLE Plebiscite (
	PlebisciteID INT PRIMARY KEY AUTO_INCREMENT,
	InitiatorID INT NOT NULL, -- The member who initiated the plebiscite
	TargetMemberID INT NOT NULL, -- The non-person member being voted out
	Reason TEXT, -- Reason for the vote
	StartDate DATETIME DEFAULT CURRENT_TIMESTAMP, -- When the plebiscite started
	EndDate DATETIME, -- When the plebiscite ended (if applicable)
	Status ENUM('Pending', 'Ongoing', 'Completed', 'Cancelled') DEFAULT 'Pending', -- Status of the plebiscite
	FOREIGN KEY (InitiatorID) REFERENCES Members(MemberID) ON DELETE CASCADE,
	FOREIGN KEY (TargetMemberID) REFERENCES Members(MemberID) ON DELETE CASCADE
);

-- Create PlebisciteVotes relation
CREATE TABLE PlebisciteVotes (
	VoteID INT PRIMARY KEY AUTO_INCREMENT,
	PlebisciteID INT NOT NULL, -- The plebiscite vote being cast
	MemberID INT NOT NULL, -- The member who is voting
	Vote ENUM('Yes', 'No') NOT NULL, -- Vote on the plebiscite (Yes or No)
	VoteDate DATETIME DEFAULT CURRENT_TIMESTAMP, -- When the vote was cast
	FOREIGN KEY (PlebisciteID) REFERENCES Plebiscite(PlebisciteID) ON DELETE CASCADE,
	FOREIGN KEY (MemberID) REFERENCES Members(MemberID) ON DELETE CASCADE
);

--  Create Notifications Relation
CREATE TABLE Notifications (
	NotificationID INT PRIMARY KEY AUTO_INCREMENT,
	MemberID INT NOT NULL,
	Content TEXT NOT NULL,
	NotificationDate DATETIME NOT NULL,
	Type ENUM('Unread', 'Read') DEFAULT 'Unread',
	FOREIGN KEY (MemberID) REFERENCES Members(MemberID) ON DELETE CASCADE
);
